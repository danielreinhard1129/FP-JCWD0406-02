// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model User {
  id              Int           @id @default(autoincrement())
  first_name      String?
  last_name       String?
  username        String        @unique
  email           String        @unique
  password        String
  contact         String?       @default("62")
  roleId          Int?
  isDeleted       Boolean       @default(false)
  isVerified      Boolean       @default(false)
  profile_picture String?
  updatedAt       DateTime      @updatedAt
  created_at      DateTime      @default(now())
  userAddress     UserAddress[]
  product         Product[]

  Role      Role?       @relation(fields: [roleId], references: [id])
  warehouse Warehouse[]
}

model Role {
  id        Int    @id @default(autoincrement())
  role_name String
  user      User[]
}

model UserAddress {
  id          Int     @id @default(autoincrement())
  userId      Int
  name        String
  contact     String  @default("62")
  street      String
  district    String
  city        String
  province    String
  postal_code Int
  isDeleted   Boolean @default(false)
  isPrimary   Boolean @default(false)

  user User @relation(fields: [userId], references: [id])
}

model Product {
  id           Int            @id @default(autoincrement())
  userId       Int
  title        String         @unique
  description  String
  price        Float
  weight       Float
  qty          Int
  categoryId   Int
  isDeleted    Boolean        @default(false)
  created_at   DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  productPhoto ProductPhoto[]
  User         User           @relation(fields: [userId], references: [id])
  Category     Category       @relation(fields: [categoryId], references: [id])
  Stock        Stock[]
}

model Category {
  id            Int       @id @default(autoincrement())
  category_name String    @unique
  isDeleted     Boolean   @default(false)
  created_at    DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  product       Product[]
}

model ProductPhoto {
  id            Int     @id @default(autoincrement())
  photo_product String
  productId     Int
  Product       Product @relation(fields: [productId], references: [id])
}

model Warehouse {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  address   String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stocks    Stock[]
  User      User?    @relation(fields: [userId], references: [id])
}

model Stock {
  id          Int            @id @default(autoincrement())
  warehouseId Int
  productId   Int
  quantity    Int
  journal     StockJournal[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}

model StockJournal {
  id        Int      @id @default(autoincrement())
  stockId   Int
  action    String // 'add' or 'reduce'
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stock Stock @relation(fields: [stockId], references: [id])
}
