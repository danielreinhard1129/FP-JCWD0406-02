// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model User {
  id              Int           @id @default(autoincrement())
  first_name      String?
  last_name       String?
  username        String        @unique
  email           String        @unique
  password        String
  contact         String?       @default("62")
  roleId          Int?
  isDeleted       Boolean       @default(false)
  isVerified      Boolean       @default(false)
  profile_picture String?
  updatedAt       DateTime      @updatedAt
  created_at      DateTime      @default(now())
  userAddress     UserAddress[]

  Role      Role?       @relation(fields: [roleId], references: [id])
  warehouse Warehouse[]
  cart      Cart[]
}

model Role {
  id        Int    @id @default(autoincrement())
  role_name String
  user      User[]
}

model UserAddress {
  id          Int     @id @default(autoincrement())
  userId      Int
  name        String
  contact     String  @default("62")
  street      String
  district    String
  city        String
  province    String
  postal_code Int
  isDeleted   Boolean @default(false)
  isPrimary   Boolean @default(false)

  user User @relation(fields: [userId], references: [id])
}

model Product {
  id            Int             @id @default(autoincrement())
  title         String          @unique
  description   String
  price         Float
  weight        Float
  categoryId    Int
  isDeleted     Boolean         @default(false)
  created_at    DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  productPhoto  ProductPhoto[]
  Category      Category        @relation(fields: [categoryId], references: [id])
  Stock         Stock[]
  StockMutation StockMutation[]
  ReqStock      ReqStock[]
  cart          Cart[]
}

model Category {
  id            Int       @id @default(autoincrement())
  category_name String    @unique
  isDeleted     Boolean   @default(false)
  created_at    DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  product       Product[]
}

model ProductPhoto {
  id            Int     @id @default(autoincrement())
  photo_product String
  productId     Int
  Product       Product @relation(fields: [productId], references: [id])
}

model Warehouse {
  id                       Int             @id @default(autoincrement())
  name                     String          @unique
  userId                   Int
  contact                  String          @default("62")
  road                     String
  subdistrict              String
  city                     String
  state                    String
  postcode                 Int
  village                  String
  latitude                 Float?
  longitude                Float?
  isDeleted                Boolean         @default(false)
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  stocks                   Stock[]
  user                     User            @relation(fields: [userId], references: [id])
  requestedStockMutations  StockMutation[] @relation("RequestWarehouse")
  destinationStockMutation StockMutation[] @relation("DestinationWarehouse")
  ReqStock                 ReqStock[]
  transaction              Transaction[]
}

model Stock {
  id          Int       @id @default(autoincrement())
  warehouseId Int
  productId   Int
  quantity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
}

model StockMutation {
  id                   Int       @id @default(autoincrement())
  reqWarehouseId       Int
  quantity             Int
  productId            Int
  warehouseId          Int
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  status               Status
  product              Product   @relation(fields: [productId], references: [id])
  destinationWarehouse Warehouse @relation("DestinationWarehouse", fields: [warehouseId], references: [id])
  requestWarehouse     Warehouse @relation("RequestWarehouse", fields: [reqWarehouseId], references: [id])
}

model ReqStock {
  id          Int      @id @default(autoincrement())
  warehouseId Int
  productId   Int
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      Status

  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}

model Cart {
  id          Int           @id @default(autoincrement())
  userId      Int
  productId   Int
  quantity    Int
  Product     Product       @relation(fields: [productId], references: [id])
  User        User          @relation(fields: [userId], references: [id])
  transaction Transaction[]
}

model Transaction {
  id           Int       @id @default(autoincrement())
  uuid         String    @unique @default(uuid())
  warehouseId  Int
  qty          Int
  shippingCost Int
  totalPrice   Int
  cartId       Int
  paymentImg   String?
  status       Status
  createdAt    DateTime  @default(now())
  updaetdAt    DateTime  @updatedAt
  Warehouse    Warehouse @relation(fields: [warehouseId], references: [id])
  Cart         Cart      @relation(fields: [cartId], references: [id])
}

enum Status {
  PENDING
  CANCELLED
  CONFIRM
  INPROGRESS
}
